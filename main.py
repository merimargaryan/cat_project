import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk
import cv2
from ultralytics import YOLO
import os

class CatDetectorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Cat Detector")
        self.root.geometry("1000x800")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–∫–∞—á–∏–≤–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é
        self.model_path = "cat_detection_yolov8n.pt"
        if not os.path.exists(self.model_path):
            messagebox.showinfo("Info", "–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
            try:
                self.model = YOLO('yolov8n.pt')
                self.model.save(self.model_path)
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å: {str(e)}")
                return
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        try:
            self.model = YOLO(self.model_path)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å: {str(e)}")
            return
        
        # GUI
        self.create_widgets()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.original_image = None
        self.processed_image = None
        self.tk_image = None
    
    def create_widgets(self):
        # –∫–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(self.root)
        button_frame.pack(pady=10)
        
        # –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.load_btn = tk.Button(
            button_frame, 
            text="Load Image", 
            command=self.load_image,
            width=15,
            height=2,
            font=('Arial', 12)
        )
        self.load_btn.pack(side=tk.LEFT, padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–µ—Ç–µ–∫—Ç–∏–≤–∞
        self.detect_btn = tk.Button(
            button_frame, 
            text="Detect Cat", 
            command=self.detect_cat,
            width=15,
            height=2,
            font=('Arial', 12)
        )
        self.detect_btn.pack(side=tk.LEFT, padx=10)
        self.detect_btn.config(state=tk.DISABLED)
        

        image_frame = tk.Frame(self.root)
        image_frame.pack(pady=10)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.original_label = tk.Label(image_frame, text="Original Image")
        self.original_label.pack(side=tk.LEFT, padx=10)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.processed_label = tk.Label(image_frame, text="Processed Image")
        self.processed_label.pack(side=tk.LEFT, padx=10)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        self.result_label = tk.Label(
            self.root, 
            text="", 
            font=('Arial', 16),
            fg="black"
        )
        self.result_label.pack(pady=10)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar()
        self.status_var.set("Ready")
        self.status_bar = tk.Label(
            self.root, 
            textvariable=self.status_var,
            relief=tk.SUNKEN,
            anchor=tk.W
        )
        self.status_bar.pack(fill=tk.X, side=tk.BOTTOM, ipady=2)
    
    def load_image(self):
        file_path = filedialog.askopenfilename(
            filetypes=[("Image files", "*.jpg *.jpeg *.png *.bmp")]
        )
        
        if file_path:
            try:
                # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                self.original_image = Image.open(file_path)
                self.original_image.thumbnail((450, 450))
                self.tk_original = ImageTk.PhotoImage(self.original_image)
                
                self.original_label.config(image=self.tk_original)
                self.original_label.image = self.tk_original
                
                # –°–±—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                self.processed_label.config(image='')
                self.processed_label.image = None
                
                # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏
                self.detect_btn.config(state=tk.NORMAL)
                self.result_label.config(text="")
                self.status_var.set(f"Loaded: {os.path.basename(file_path)}")
                
            except Exception as e:
                messagebox.showerror("Error", f"Failed to load image: {str(e)}")
    
    def detect_cat(self):
        if not hasattr(self, 'original_image'):
            return
        
        try:
            self.status_var.set("Processing...")
            self.root.update()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PIL Image –≤ OpenCV format
            open_cv_image = cv2.cvtColor(
                cv2.imread(filedialog.askopenfilename()), 
                cv2.COLOR_RGB2BGR
            )
            
            # –î–µ—Ç–µ–∫—Ü–∏—è
            results = self.model.predict(open_cv_image)
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            annotated_img = results[0].plot()
            annotated_img = cv2.cvtColor(annotated_img, cv2.COLOR_BGR2RGB)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ PIL Image
            self.processed_image = Image.fromarray(annotated_img)
            self.processed_image.thumbnail((450, 450))
            self.tk_processed = ImageTk.PhotoImage(self.processed_image)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.processed_label.config(image=self.tk_processed)
            self.processed_label.image = self.tk_processed
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ—Å—Ç—å –ª–∏ –∫–æ—Ç
            cats_detected = False
            for result in results:
                for box in result.boxes:
                    if result.names[int(box.cls)] == 'cat':
                        cats_detected = True
                        break
            
            if cats_detected:
                self.result_label.config(text="Cat detected! üò∫", fg="green")
            else:
                self.result_label.config(text="No cat detected. üòø", fg="red")
            
            self.status_var.set("Detection completed")
            
        except Exception as e:
            messagebox.showerror("Error", f"Detection failed: {str(e)}")
            self.status_var.set("Error during detection")

if __name__ == "__main__":
    root = tk.Tk()
    app = CatDetectorApp(root)
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
    window_width = 1000
    window_height = 800
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    x = (screen_width // 2) - (window_width // 2)
    y = (screen_height // 2) - (window_height // 2)
    root.geometry(f"{window_width}x{window_height}+{x}+{y}")
    
    root.mainloop()